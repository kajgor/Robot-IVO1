#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.7.2 on Thu Mar 09 10:29:32 2017
#

import wx, sys, os, pygame, time, socket, pickle
from os import system
from class_console import MainConsole
from init_variables import *
from pygame.locals import *
from config_rw import *

# begin wxGlade: dependencies
import gettext
# end wxGlade
# begin wxGlade: extracode
# end wxGlade

# reset_save()
# execfile("config_read.py")

MC_instance = MainConsole()
# global srv
# global screen

class PygameDisplay(wx.Window):
    pygame.init()

    background = pygame.image.load('images/HUD.jpg')
    green_arrow = pygame.image.load('images/green_arrow.png')
    red_arrow = pygame.image.load('images/red_arrow.png')
    cyan_arrow = pygame.image.load('images/cyan_arrow.png')
    gray_arrow = pygame.image.load('images/gray_arrow.png')
    clock = pygame.time.Clock()
    pygame.display.set_caption("Robot IVO-1 console", "IVO-1")

    screen = pygame.display.set_mode((480, 360), pygame.DOUBLEBUF)

    global Motor_DIR, Motor_PWR, Motor_RPM, Motor_ACK, Current, Voltage
    #, Motor_Power

    def __init__(self, parent, ID):
        global screen
        wx.Window.__init__(self, parent, ID)
        self.parent = parent
        self.hwnd = self.GetHandle()

        self.size = self.GetSizeTuple()
        self.size_dirty = True

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_TIMER, self.Update, self.timer)
        self.Bind(wx.EVT_SIZE, self.OnSize)

        self.fps = 60.0
        self.timespacing = 1000.0 / self.fps
        self.timer.Start(self.timespacing, False)

        self.linespacing = 5

        self.Motor_Power=(0, 0)
        print pygame.display.Info()


    def Update(self, event):
        # Any update tasks would go here (moving sprites, advancing animation frames etc.)
        print "UPDATE"
        print "LEFT: " + str(LEFT)
        print "RIGHT: " + str(RIGHT)
        time.sleep(1)

        halt_cmd = MC_instance.get_userinput()
        if not halt_cmd:
            Motor_Power = [0, 0]
            Motor_Power[RIGHT] = speed - direction
            Motor_Power[LEFT] = speed + direction

            request = MC_instance.encode_transmission(Motor_Power, mouseX, mouseY, "CMD")
            resp = MC_instance.transmit(request, srv)

            self.screen.blit(self.background, (0, 0))
        else:
            MC_instance.transmit(halt_cmd, srv)
            srv.close()
            print "Closing connection"
            sys.exit(0)  # quit the program

        # --------
        if not resp:
            MC_instance.disp_text("COMM ERROR", 370, 5, RED, DDRED, self.screen)
        else:
            MC_instance.disp_small_text("LINK OK", 435, 5, GREEN, DDGREEN, self.screen)
            #        print(str(pygame.mouse.get_pressed()))
            MC_instance.decode_transmission(resp)

        self.Redraw()

    def Redraw(self, Motor_PWR, Motor_RPM, Motor_ACK, Motor_DIR, Motor_Power, Voltage, Current):
        # global Motor_DIR[RIGHT], Motor_DIR[LEFT], Motor_PWR[RIGHT], Motor_PWR[LEFT], Motor_RPM[RIGHT], Motor_RPM[LEFT]
        # global Motor_ACK[RIGHT], Motor_ACK[LEFT], Current, Voltage, Motor_Power[RIGHT], Motor_Power[LEFT]

        if self.size_dirty:
            self.screen = pygame.Surface(self.size, 0, 32)
            self.size_dirty = False

        self.screen.fill((0, 0, 0))

        # DRAW SCREEN
        MC_instance.disp_text("R Power: " + str(Motor_PWR[RIGHT]), 350, 37, CYAN, DDBLUE, self.screen)
        MC_instance.disp_text("R Rpm:   " + str(Motor_RPM[RIGHT]), 350, 57, CYAN, DDBLUE, self.screen)
        MC_instance.disp_text("R ACK:   " + str(Motor_ACK[RIGHT]), 350, 77, CYAN, DDBLUE, self.screen)

        MC_instance.disp_text("L Power: " + str(Motor_PWR[LEFT]), 10, 37, CYAN, DDBLUE, self.screen)
        MC_instance.disp_text("L Rpm:   " + str(Motor_RPM[LEFT]), 10, 57, CYAN, DDBLUE, self.screen)
        MC_instance.disp_text("L ACK:   " + str(Motor_ACK[LEFT]), 10, 77, CYAN, DDBLUE, self.screen)

        MC_instance.disp_text("L DeBug: " + str(Motor_DIR[LEFT]), 10, 310, CYAN, DDBLUE, self.screen)
        MC_instance.disp_text("R DeBug: " + str(Motor_DIR[RIGHT]), 130, 310, CYAN, DDBLUE, self.screen)
        MC_instance.disp_text("Voltage: " + str(Voltage) + " V ", 10, 330, CYAN, DDBLUE, self.screen)
        MC_instance.disp_text("Current: " + str(Current) + " mA ", 150, 330, CYAN, DDBLUE, self.screen)

        MC_instance.disp_text("CamV: " + str(mouseX) + " ", 350, 310, CYAN, DDBLUE, self.screen)
        MC_instance.disp_text("CamH: " + str(mouseY) + " ", 350, 330, CYAN, DDBLUE, self.screen)

        MC_instance.plot_screen(Motor_Power, self.cyan_arrow, self.gray_arrow, self.screen)

        pygame.display.flip()
        self.clock.tick(15)

        # cur = 0
        #
        # w, h = self.screen.get_size()
        # while cur <= h:
        #     pygame.draw.aaline(self.screen, (255, 255, 255), (0, h - cur), (cur, 0))
        #
        #     cur += self.linespacing
        #
        # s = pygame.image.tostring(self.screen, 'RGB')  # Convert the surface to an RGB string
        # img = wx.ImageFromData(self.size[0], self.size[1], s)  # Load this string into a wx image
        # bmp = wx.BitmapFromImage(img)  # Get the image in bitmap form
        # dc = wx.ClientDC(self)  # Device context for drawing the bitmap
        # dc.DrawBitmap(bmp, 0, 0, False)  # Blit the bitmap image to the display
        # del dc

    def OnPaint(self, event):
        print "++++" + str(self.Motor_PWR)
        self.Redraw(self.Motor_PWR, self.Motor_RPM, self.Motor_ACK, self.Motor_DIR, self.Motor_Power, self.Voltage, self.Current)
        event.Skip()  # Make sure the parent frame gets told to redraw as well

    def OnSize(self, event):
        self.size = self.GetSizeTuple()
        self.size_dirty = True

    def Kill(self, event):
        # Make sure Pygame can't be asked to redraw /before/ quitting by unbinding all methods which
        # call the Redraw() method
        # (Otherwise wx seems to call Draw between quitting Pygame and destroying the frame)
        # This may or may not be necessary now that Pygame is just drawing to surfaces
        self.Unbind(event=wx.EVT_PAINT, handler=self.OnPaint)
        self.Unbind(event=wx.EVT_TIMER, handler=self.Update, source=self.timer)


class ConnectScreen(wx.Frame):
    global Host, Port_Comm
    def __init__(self, *args, **kwds):
        # begin wxGlade: ConnectScreen.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX
        wx.Frame.__init__(self, *args, **kwds)

        config_read(self)

        self.label_server_ip_address = wx.StaticText(self, wx.ID_ANY, "Server IP/address", style=wx.ALIGN_RIGHT)
        self.ip_address = wx.ComboBox(self, wx.ID_ANY, str(self.Host),
                                      choices=["127.0.0.1", "localhost", "athome21.hopto.org"], style=wx.CB_DROPDOWN)
        self.label_port = wx.StaticText(self, wx.ID_ANY, "Port", style=wx.ALIGN_RIGHT)
        self.ip_port = wx.SpinCtrl(self, wx.ID_ANY, str(self.Port_Comm), min=100, max=19999)
        self.button_setup = wx.Button(self, wx.ID_PROPERTIES, "")
        self.checkbox_local_test = wx.CheckBox(self, wx.ID_ANY, "Local Test ", style=wx.ALIGN_RIGHT)
        # self.static_line_1 = wx.StaticLine(self, wx.ID_ANY)
        self.button_cancel = wx.Button(self, wx.ID_CANCEL, "")
        self.button_commit = wx.Button(self, wx.ID_OPEN, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ConnectScreen.__set_properties
        self.SetTitle("Remote Access Console")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("icons/robot_icon_24x24.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetFocus()
        self.label_server_ip_address.SetMinSize((130, 20))
        self.ip_address.SetFocus()
        self.ip_port.SetMinSize((100, -1))
        self.checkbox_local_test.SetValue(1)
        # end wxGlade

        self.button_setup.Bind(wx.EVT_BUTTON, self.OnButton_setup)
        self.button_cancel.Bind(wx.EVT_BUTTON, self.OnButton_cancel)
        self.button_commit.Bind(wx.EVT_BUTTON, self.OnButton_commit)

    def __do_layout(self):
        # begin wxGlade: ConnectScreen.__do_layout
        grid_sizer_MF = wx.GridSizer(2, 4, 5, 1)
        grid_sizer_MF.Add(self.label_server_ip_address, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_MF.Add(self.ip_address, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_MF.Add(self.label_port, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_MF.Add(self.ip_port, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_MF.Add(self.button_setup, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_MF.Add(self.checkbox_local_test, 0, wx.ALIGN_CENTER, 0)
        # grid_sizer_MF.Add(self.static_line_1, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_MF.Add(self.button_cancel, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_MF.Add(self.button_commit, 0, wx.ALIGN_CENTER, 0)
        self.SetSizer(grid_sizer_MF)
        grid_sizer_MF.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def execute_cmd(self, cmd_string):
        #  system("clear")
        retcode = system(cmd_string)
        print ""
        if retcode == 0:
            print "Command executed successfully"
        else:
            print "Command terminated with error: " + str(retcode)
        # raw_input("Press enter")
        print ""

    def SaveConfig(self):
        config_save(self)

    def OnButton_setup(event, button_label):
        wx.MessageBox("Not implemented yet!", "Button pressed.");

    def OnButton_cancel(event, button_label):
        #      wx.MessageBox("This is a message.", "Button pressed.");
        event.SaveConfig()
        event.Destroy()

    def OnButton_commit(event, button_label):

        Host = event.ip_address.GetValue()
        Port_Comm = event.ip_port.GetValue()

        srv = event.estabilish_connection(Host, Port_Comm)
        time.sleep(3)

        # gst-launch-1.0 - v videotestsrc pattern=smpte ! video/x-raw,
        # width=320, height=240 ! gdppay ! tcpserversink
        # host=127.0.0.1
        # port=12344

        #        event.button_commit.SetLabel('Connecting...')
        gstreamer_cmd = "start /B " + Gstreamer_Path + "gst-launch-1.0 -v tcpclientsrc "
        if event.checkbox_local_test.GetValue():
            gstreamer_cmd += "host=127.0.0.1 port=12344"
            gstreamer_cmd += " ! gdpdepay ! videoconvert ! autovideosink sync = false"
        else:
            gstreamer_cmd += "host=" + Host + " port=" + Port_Video.__str__()
            gstreamer_cmd += " ! gdpdepay ! rtph264depay ! avdec_h264 ! videoconvert ! autovideosink sync=false"

        print gstreamer_cmd
        event.execute_cmd(gstreamer_cmd)

        # frame_CON = Console(None, wx.ID_ANY, "")
        # print "GetApp().TopWindow: " + str(wx.GetApp().TopWindow)
        # import sys
        event.hwnd = event.GetChildren()[0].GetHandle()
        # if sys.platform == "win32":
        #     os.environ['SDL_VIDEODRIVER'] = 'windib'
        # os.environ['SDL_WINDOWID'] = str(event.hwnd) #must be before init

        ## NOTE WE DON'T IMPORT PYGAME UNTIL NOW.  Don't put "import pygame" at the top of the file.
        # frame_CONSOLE = PygameDisplay(event, -1)

        frame_CONSOLE = Console(None, -1, "Console")
        frame_CONSOLE.Show()

        # execfile("rac_console.py")
        # event.Destroy()


    def estabilish_connection(self, Host, Port_Comm):
        # global srv
        server_address = (Host, Port_Comm)
        self.srv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        print "Connecting..."
        self.srv.connect(server_address)
        print "Connected!"

        return self.srv


# end of class ConnectScreen

class Console(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Console.__init__
        # wx.MDIChildFrame.__init__(self, *args, **kwds)
        wx.Frame.__init__(self, *args, **kwds)

        self.display = PygameDisplay(self, -1)

        self.statusbar = self.CreateStatusBar()
        self.statusbar.SetFieldsCount(3)
        self.statusbar.SetStatusWidths([-3, -4, -2])
        self.statusbar.SetStatusText("wxPython", 0)
        self.statusbar.SetStatusText("Look, it's a nifty status bar!!!", 1)

        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.Bind(wx.EVT_CLOSE, self.Kill)

        self.curframe = 0

        self.SetTitle("Pygame embedded in wxPython")
        self.slider = wx.Slider(self, wx.ID_ANY, 5, 1, 10, style=wx.SL_HORIZONTAL | wx.SL_LABELS)
        self.slider.SetTickFreq(0.1, 1)
        self.button = wx.Button(self, -1, "DO NOT PRESS THIS BUTTON")

        #
        # self.Camera_View = wx.Button(self, wx.ID_ANY, _("button_A"))
        # # self.Camera_View = CameraView(self, wx.ID_ANY)
        # self.button_1 = wx.Button(self, wx.ID_ANY, _("button_1"))
        # self.Control_Console = wx.Button(self, wx.ID_ANY, _("button_B"))
        # # self.Control_Console = ControlConsole(self, wx.ID_ANY)
        # self.button_2 = wx.ToggleButton(self, wx.ID_ANY, _("button_2"))
        #
        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Console.__set_properties
        self.SetTitle("Main_Console")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(
            wx.Bitmap("icons/robot_icon_24x24.png",
                      wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetFocus()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Console.__do_layout
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer2 = wx.BoxSizer(wx.HORIZONTAL)

        self.sizer.Add(self.sizer2, 0, flag=wx.EXPAND)
        self.sizer.Add(self.display, 1, flag=wx.EXPAND)
        self.sizer2.Add(self.slider, 1, flag=wx.EXPAND | wx.RIGHT, border=5)
        self.sizer2.Add(self.button, 0, flag=wx.EXPAND | wx.ALL, border=5)

        self.SetAutoLayout(True)
        self.SetSizer(self.sizer)
        self.Layout()

        # grid_sizer_1 = wx.GridSizer(2, 2, 0, 0)
        # grid_sizer_1.Add(self.Camera_View, 1, wx.EXPAND, 0)
        # grid_sizer_1.Add(self.button_1, 0, 0, 0)
        # grid_sizer_1.Add(self.Control_Console, 1, wx.EXPAND, 0)
        # grid_sizer_1.Add(self.button_2, 0, 0, 0)

        # self.SetSizer(grid_sizer_1)
        # grid_sizer_1.Fit(self)
        # self.Layout()
        # self.Centre()
        # end wxGlade

    def Kill(self, event):
        self.display.Kill(event)
        self.Destroy()

    def OnSize(self, event):
        self.Layout()

    def Update(self, event):
        self.curframe += 1
        self.statusbar.SetStatusText("Frame %i" % self.curframe, 2)

    def OnScroll(self, event):
        self.display.linespacing = self.slider.GetValue()

        # def ButtonClick(self, event):
        # (Commented code replaces the main display with the 'foooool!' display)
        # self.sizer.Detach(self.display)
        # self.display.Destroy()
        # self.display = FoolDisplay(self, -1)
        # self.sizer.Add(self.display, 1, flag = wx.EXPAND)
        # self.Layout()


# end of class Console

class RAC(wx.App):
    def OnInit(self):
        print "START"
        frame_MF = ConnectScreen(None, wx.ID_ANY, "")
        frame_MF.Show()
        frame_MF.button_commit.SetLabel('Connect')

        self.SetTopWindow(frame_MF)
        return True


# end of class RAC

if __name__ == "__main__":
    gettext.install("RAC")  # replace with the appropriate catalog name

    app = RAC()
    app.MainLoop()
